{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport sendReq from '../helper/sendReqLogin';\nexport const sendReqToServer = createAsyncThunk(\"/authenticate/login\", async (configReq, thunkAPI) => {\n  const res = await sendReq(configReq);\n  return res.data;\n});\nconst authenticate = createSlice({\n  name: \"authenticate\",\n  initialState: {\n    auth: {\n      isAuthenticated: false,\n      message: {\n        isErr: false,\n        mess: null\n      }\n    },\n    isLoading: false\n  },\n  reducers: {\n    setMess: (state, action) => {\n      state.auth.message = {};\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(sendReqToServer.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(sendReqToServer.fulfilled, (state, action) => {\n      if (state.auth !== action.payload.isAuthenticated) {\n        state.auth = action.payload;\n      } else {\n        state.auth.message = action.payload.message;\n      }\n\n      state.isLoading = false;\n    });\n  }\n});\nexport const {\n  setStateAuth,\n  setIsLoading\n} = authenticate.actions;\nexport default authenticate.reducer;","map":{"version":3,"sources":["D:/Learn_ReactJS/document-share/client/src/features/authenticateSlice.js"],"names":["createAsyncThunk","createSlice","sendReq","sendReqToServer","configReq","thunkAPI","res","data","authenticate","name","initialState","auth","isAuthenticated","message","isErr","mess","isLoading","reducers","setMess","state","action","extraReducers","builder","addCase","pending","fulfilled","payload","setStateAuth","setIsLoading","actions","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,OAAOC,OAAP,MAAoB,wBAApB;AAEA,OAAO,MAAMC,eAAe,GAAGH,gBAAgB,CAC3C,qBAD2C,EAE3C,OAAOI,SAAP,EAAkBC,QAAlB,KAA+B;AAC3B,QAAMC,GAAG,GAAG,MAAMJ,OAAO,CAACE,SAAD,CAAzB;AACA,SAAOE,GAAG,CAACC,IAAX;AACH,CAL0C,CAAxC;AAQP,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC7BQ,EAAAA,IAAI,EAAE,cADuB;AAE7BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAG;AACHC,MAAAA,eAAe,EAAE,KADd;AAEHC,MAAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE,KADF;AAELC,QAAAA,IAAI,EAAE;AAFD;AAFN,KADG;AAQVC,IAAAA,SAAS,EAAG;AARF,GAFe;AAY7BC,EAAAA,QAAQ,EAAG;AACPC,IAAAA,OAAO,EAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACR,IAAN,CAAWE,OAAX,GAAqB,EAArB;AAGH;AALM,GAZkB;AAmB7BQ,EAAAA,aAAa,EAAIC,OAAD,IAAa;AACzBA,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,eAAe,CAACqB,OAAhC,EAAyC,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACxDD,MAAAA,KAAK,CAACH,SAAN,GAAkB,IAAlB;AACH,KAFD;AAGAM,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,eAAe,CAACsB,SAAhC,EAA2C,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC1D,UAAGD,KAAK,CAACR,IAAN,KAAeS,MAAM,CAACM,OAAP,CAAed,eAAjC,EAAkD;AAC9CO,QAAAA,KAAK,CAACR,IAAN,GAAaS,MAAM,CAACM,OAApB;AACH,OAFD,MAGK;AACDP,QAAAA,KAAK,CAACR,IAAN,CAAWE,OAAX,GAAqBO,MAAM,CAACM,OAAP,CAAeb,OAApC;AACH;;AACDM,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AACH,KARD;AASH;AAhC4B,CAAD,CAAhC;AAmCA,OAAO,MAAM;AAACW,EAAAA,YAAD;AAAeC,EAAAA;AAAf,IAA+BpB,YAAY,CAACqB,OAAlD;AACP,eAAerB,YAAY,CAACsB,OAA5B","sourcesContent":["import {createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport sendReq from '../helper/sendReqLogin'\r\n\r\nexport const sendReqToServer = createAsyncThunk(\r\n    \"/authenticate/login\",\r\n    async (configReq, thunkAPI) => {\r\n        const res = await sendReq(configReq)\r\n        return res.data\r\n    }\r\n)\r\n\r\nconst authenticate = createSlice({\r\n    name: \"authenticate\",\r\n    initialState: {\r\n        auth : {\r\n            isAuthenticated: false,\r\n            message: {\r\n                isErr: false,\r\n                mess: null\r\n            }\r\n        },\r\n        isLoading : false\r\n    },\r\n    reducers : {\r\n        setMess : (state, action) => {\r\n            state.auth.message = {\r\n                \r\n            }\r\n        }\r\n    },\r\n    extraReducers : (builder) => {\r\n        builder.addCase(sendReqToServer.pending, (state, action) => {\r\n            state.isLoading = true;\r\n        })\r\n        builder.addCase(sendReqToServer.fulfilled, (state, action) => {\r\n            if(state.auth !== action.payload.isAuthenticated) {\r\n                state.auth = action.payload\r\n            }\r\n            else {\r\n                state.auth.message = action.payload.message\r\n            }\r\n            state.isLoading = false;\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setStateAuth, setIsLoading} = authenticate.actions;\r\nexport default authenticate.reducer;"]},"metadata":{},"sourceType":"module"}