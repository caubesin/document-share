{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport sendReq from '../helper/sendReqToServer';\nexport const upLoadFile = createAsyncThunk(\"localhost:4000/file/upload\", async (data, thunkAPI) => {\n  const configReq = {\n    method: 'post',\n    url: `/file/upload/${data.type}`,\n    header: {},\n    data: data.data\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const downLoadFile = createAsyncThunk(\"localhost:4000/download\", async (file, thunkAPI) => {\n  const configReq = {\n    method: \"get\",\n    url: `/file/download/${file._id}`,\n    responseType: \"blob\"\n  };\n  await sendReq(configReq).then(async res => {\n    const link = document.createElement(\"a\");\n    link.target = \"_blank\";\n    link.download = file.metadata.originalname;\n    link.href = URL.createObjectURL(new Blob([res.data], {\n      type: `${res.data.type}`\n    }));\n    link.click();\n  });\n});\nexport const getFile = createAsyncThunk(\"localhost:4000/file\", async (type, thunkAPI) => {\n  const configReq = {\n    method: \"get\",\n    url: '/file',\n    params: {\n      type: type\n    }\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const createFolder = createAsyncThunk(\"localhost:4000/folder/create\", async (data, thunkAPI) => {\n  const configReq = {\n    method: \"get\",\n    url: '/folder/create',\n    params: {\n      name: data.name,\n      path: da\n    }\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nconst file = createSlice({\n  name: \"file\",\n  initialState: {\n    file: [\"\"],\n    fileDownload: \"\",\n    message: {\n      type: null,\n      mess: null\n    },\n    isLoading: true\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.message = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(upLoadFile.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(upLoadFile.fulfilled, (state, action) => {\n      state.message = action.payload.message;\n      state.isLoading = false;\n    });\n    builder.addCase(getFile.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(getFile.fulfilled, (state, action) => {\n      state.file = action.payload.file;\n      state.isLoading = false;\n    });\n  }\n});\nexport const {\n  setMessage\n} = file.actions;\nexport default file.reducer;","map":{"version":3,"sources":["D:/Learn_ReactJS/document-share/client/src/features/fileSlice.js"],"names":["createAsyncThunk","createSlice","sendReq","upLoadFile","data","thunkAPI","configReq","method","url","type","header","res","downLoadFile","file","_id","responseType","then","link","document","createElement","target","download","metadata","originalname","href","URL","createObjectURL","Blob","click","getFile","params","createFolder","name","path","da","initialState","fileDownload","message","mess","isLoading","reducers","setMessage","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport sendReq from '../helper/sendReqToServer';\r\n\r\nexport const upLoadFile = createAsyncThunk(\r\n    \"localhost:4000/file/upload\",\r\n    async (data, thunkAPI) => {\r\n        const configReq = {\r\n            method: 'post',\r\n            url: `/file/upload/${data.type}`,\r\n            header: {},\r\n            data: data.data\r\n        }\r\n        const res = await sendReq(configReq);\r\n        return res.data;\r\n    }\r\n)\r\n\r\nexport const downLoadFile = createAsyncThunk(\r\n    \"localhost:4000/download\",\r\n    async (file, thunkAPI) => {\r\n        const configReq = {\r\n            method: \"get\",\r\n            url: `/file/download/${file._id}`,\r\n            responseType: \"blob\"\r\n        }\r\n        await sendReq(configReq)\r\n        .then(async (res) => {\r\n            const link = document.createElement(\"a\");\r\n            link.target = \"_blank\";\r\n            link.download = file.metadata.originalname;\r\n            link.href = URL.createObjectURL(\r\n                new Blob([res.data], { type: `${res.data.type}` })\r\n            );\r\n            link.click();\r\n        });\r\n    }\r\n)\r\n\r\nexport const getFile = createAsyncThunk(\r\n    \"localhost:4000/file\",\r\n    async (type,thunkAPI) => {\r\n        const configReq = {\r\n            method: \"get\",\r\n            url: '/file',\r\n            params: {\r\n                type : type\r\n            }\r\n        }\r\n        const res = await sendReq(configReq);\r\n        return res.data\r\n    }\r\n)\r\n\r\nexport const createFolder = createAsyncThunk(\r\n    \"localhost:4000/folder/create\",\r\n    async (data,thunkAPI) => {\r\n        const configReq = {\r\n            method: \"get\",\r\n            url: '/folder/create',\r\n            params: {\r\n                name : data.name,\r\n                path: da\r\n            }\r\n        }\r\n        const res = await sendReq(configReq);\r\n        return res.data\r\n    }\r\n)\r\n\r\nconst file = createSlice({\r\n    name: \"file\",\r\n    initialState: {\r\n        file: [\"\"],\r\n        fileDownload: \"\",\r\n        message: {\r\n            type: null,\r\n            mess: null\r\n        },\r\n        isLoading: true\r\n    },\r\n    reducers: {\r\n        setMessage : (state, action) => {\r\n            state.message = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(upLoadFile.pending, (state, action) => {\r\n            state.isLoading = true;\r\n        })\r\n        builder.addCase(upLoadFile.fulfilled, (state, action) => {\r\n            state.message = action.payload.message\r\n            state.isLoading = false;\r\n        })\r\n        builder.addCase(getFile.pending, (state, action) => {\r\n            state.isLoading = true\r\n        })\r\n        builder.addCase(getFile.fulfilled, (state, action) => {\r\n            state.file = action.payload.file\r\n            state.isLoading = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setMessage} = file.actions;\r\nexport default file.reducer;"]},"metadata":{},"sourceType":"module"}