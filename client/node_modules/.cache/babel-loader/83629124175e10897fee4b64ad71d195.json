{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport sendReq from '../helper/sendReqToServer';\nexport const upLoadFile = createAsyncThunk(\"localhost:4000/upload\", async (data, thunkAPI) => {\n  const configReq = {\n    method: 'post',\n    url: '/upload',\n    header: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    data: data\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const downLoadFile = createAsyncThunk(\"localhost:4000/upload\", async (configReq, thunkAPI) => {\n  const res = await sendReq(configReq);\n  return res.data;\n});\nconst file = createSlice({\n  name: \"file\",\n  initialState: {\n    file: null,\n    message: {\n      type: null,\n      mess: null\n    },\n    isLoading: false\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(upLoadFile.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(upLoadFile.fulfilled, (state, action) => {\n      state.file = action.file;\n      state.message = action.payload;\n      state.isLoading = false;\n    });\n  }\n});\nexport const {} = file.actions;\nexport default file.reducer;","map":{"version":3,"sources":["D:/Learn_ReactJS/document-share/client/src/features/fileSlice.js"],"names":["createAsyncThunk","createSlice","sendReq","upLoadFile","data","thunkAPI","configReq","method","url","header","res","downLoadFile","file","name","initialState","message","type","mess","isLoading","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","actions","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CACtC,uBADsC,EAEtC,OAAOI,IAAP,EAAaC,QAAb,KAA0B;AACtB,QAAMC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,GAAG,EAAE,SAFS;AAGdC,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ,KAHM;AAMdL,IAAAA,IAAI,EAAEA;AANQ,GAAlB;AAQA,QAAMM,GAAG,GAAG,MAAMR,OAAO,CAACI,SAAD,CAAzB;AACA,SAAOI,GAAG,CAACN,IAAX;AACH,CAbqC,CAAnC;AAgBP,OAAO,MAAMO,YAAY,GAAGX,gBAAgB,CACxC,uBADwC,EAExC,OAAOM,SAAP,EAAkBD,QAAlB,KAA+B;AAC3B,QAAMK,GAAG,GAAG,MAAMR,OAAO,CAACI,SAAD,CAAzB;AACA,SAAOI,GAAG,CAACN,IAAX;AACH,CALuC,CAArC;AAQP,MAAMQ,IAAI,GAAGX,WAAW,CAAC;AACrBY,EAAAA,IAAI,EAAE,MADe;AAErBC,EAAAA,YAAY,EAAE;AACVF,IAAAA,IAAI,EAAE,IADI;AAEVG,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAE,IADD;AAELC,MAAAA,IAAI,EAAE;AAFD,KAFC;AAMVC,IAAAA,SAAS,EAAE;AAND,GAFO;AAUrBC,EAAAA,QAAQ,EAAE,EAVW;AAarBC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,UAAU,CAACoB,OAA3B,EAAoC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACH,KAFD;AAGAG,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,UAAU,CAACuB,SAA3B,EAAsC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACrDD,MAAAA,KAAK,CAACZ,IAAN,GAAaa,MAAM,CAACb,IAApB;AACAY,MAAAA,KAAK,CAACT,OAAN,GAAgBU,MAAM,CAACE,OAAvB;AACAH,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACH,KAJD;AAKH;AAtBoB,CAAD,CAAxB;AAyBA,OAAO,MAAM,KAAKN,IAAI,CAACgB,OAAhB;AACP,eAAehB,IAAI,CAACiB,OAApB","sourcesContent":["import {createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport sendReq from '../helper/sendReqToServer';\r\n\r\nexport const upLoadFile = createAsyncThunk(\r\n    \"localhost:4000/upload\",\r\n    async (data, thunkAPI) => {\r\n        const configReq = {\r\n            method: 'post',\r\n            url: '/upload',\r\n            header: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            },\r\n            data: data\r\n        }\r\n        const res = await sendReq(configReq);\r\n        return res.data;\r\n    }\r\n)\r\n\r\nexport const downLoadFile = createAsyncThunk(\r\n    \"localhost:4000/upload\",\r\n    async (configReq, thunkAPI) => {\r\n        const res = await sendReq(configReq);\r\n        return res.data;\r\n    }\r\n)\r\n\r\nconst file = createSlice({\r\n    name: \"file\",\r\n    initialState: {\r\n        file: null,\r\n        message: {\r\n            type: null,\r\n            mess: null\r\n        },\r\n        isLoading: false\r\n    },\r\n    reducers: {\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(upLoadFile.pending, (state, action) => {\r\n            state.isLoading = true\r\n        })\r\n        builder.addCase(upLoadFile.fulfilled, (state, action) => {\r\n            state.file = action.file\r\n            state.message = action.payload\r\n            state.isLoading = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const {} = file.actions;\r\nexport default file.reducer;"]},"metadata":{},"sourceType":"module"}