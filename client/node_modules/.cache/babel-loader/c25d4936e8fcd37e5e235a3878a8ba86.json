{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport sendReq from '../helper/sendReqToServer';\nexport const sendReqLogin = createAsyncThunk(\"localhost:4000/account/signin\", async (dataReq, thunkAPI) => {\n  const configReq = {\n    method: 'POST',\n    url: '/account/signin',\n    header: {\n      \"Content-Type\": 'application/x-www-form-urlencoded;charset=utf-8'\n    },\n    data: dataReq\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const sendReqReLogin = createAsyncThunk(\"localhost:4000/\", async);\nconst authenticate = createSlice({\n  name: \"authenticate\",\n  initialState: {\n    auth: {\n      isAuthenticated: false,\n      message: {\n        type: null,\n        mess: null\n      }\n    },\n    isLoading: false\n  },\n  reducers: {\n    setMess: (state, action) => {\n      state.auth.message = {\n        type: action.payload.type,\n        mess: action.payload.mess\n      };\n    },\n    setIsLoad: (state, action) => {\n      state.isLoading = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(sendReqLogin.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(sendReqLogin.fulfilled, (state, action) => {\n      if (state.auth !== action.payload.isAuthenticated) {\n        state.auth = action.payload;\n      } else {\n        state.auth.message = action.payload.message;\n      }\n\n      state.isLoading = false;\n    });\n  }\n});\nexport const {\n  setMess,\n  setIsLoad\n} = authenticate.actions;\nexport default authenticate.reducer;","map":{"version":3,"sources":["D:/Learn_ReactJS/document-share/client/src/features/authenticateSlice.js"],"names":["createAsyncThunk","createSlice","sendReq","sendReqLogin","dataReq","thunkAPI","configReq","method","url","header","data","res","sendReqReLogin","async","authenticate","name","initialState","auth","isAuthenticated","message","type","mess","isLoading","reducers","setMess","state","action","payload","setIsLoad","extraReducers","builder","addCase","pending","fulfilled","actions","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,MAAMC,YAAY,GAAGH,gBAAgB,CACxC,+BADwC,EAExC,OAAOI,OAAP,EAAgBC,QAAhB,KAA6B;AACzB,QAAMC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,MADM;AAEdC,IAAAA,GAAG,EAAE,iBAFS;AAGdC,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ,KAHM;AAMdC,IAAAA,IAAI,EAAEN;AANQ,GAAlB;AAQA,QAAMO,GAAG,GAAG,MAAMT,OAAO,CAACI,SAAD,CAAzB;AACA,SAAOK,GAAG,CAACD,IAAX;AACH,CAbuC,CAArC;AAgBP,OAAO,MAAME,cAAc,GAAGZ,gBAAgB,CAC1C,iBAD0C,EAE1Ca,KAF0C,CAAvC;AAKP,MAAMC,YAAY,GAAGb,WAAW,CAAC;AAC7Bc,EAAAA,IAAI,EAAE,cADuB;AAE7BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAG;AACHC,MAAAA,eAAe,EAAE,KADd;AAEHC,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAE,IADD;AAELC,QAAAA,IAAI,EAAE;AAFD;AAFN,KADG;AAQVC,IAAAA,SAAS,EAAG;AARF,GAFe;AAY7BC,EAAAA,QAAQ,EAAG;AACPC,IAAAA,OAAO,EAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACR,IAAN,CAAWE,OAAX,GAAqB;AACjBC,QAAAA,IAAI,EAAEM,MAAM,CAACC,OAAP,CAAeP,IADJ;AAEjBC,QAAAA,IAAI,EAAEK,MAAM,CAACC,OAAP,CAAeN;AAFJ,OAArB;AAIH,KANM;AAOPO,IAAAA,SAAS,EAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACH,SAAN,GAAkBI,MAAM,CAACC,OAAzB;AACH;AATM,GAZkB;AAuB7BE,EAAAA,aAAa,EAAIC,OAAD,IAAa;AACzBA,IAAAA,OAAO,CAACC,OAAR,CAAgB5B,YAAY,CAAC6B,OAA7B,EAAsC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACrDD,MAAAA,KAAK,CAACH,SAAN,GAAkB,IAAlB;AACH,KAFD;AAGAQ,IAAAA,OAAO,CAACC,OAAR,CAAgB5B,YAAY,CAAC8B,SAA7B,EAAwC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACvD,UAAGD,KAAK,CAACR,IAAN,KAAeS,MAAM,CAACC,OAAP,CAAeT,eAAjC,EAAkD;AAC9CO,QAAAA,KAAK,CAACR,IAAN,GAAaS,MAAM,CAACC,OAApB;AACH,OAFD,MAGK;AACDF,QAAAA,KAAK,CAACR,IAAN,CAAWE,OAAX,GAAqBO,MAAM,CAACC,OAAP,CAAeR,OAApC;AACH;;AACDM,MAAAA,KAAK,CAACH,SAAN,GAAkB,KAAlB;AACH,KARD;AASH;AApC4B,CAAD,CAAhC;AAuCA,OAAO,MAAM;AAACE,EAAAA,OAAD;AAAUI,EAAAA;AAAV,IAAuBd,YAAY,CAACoB,OAA1C;AACP,eAAepB,YAAY,CAACqB,OAA5B","sourcesContent":["import {createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport sendReq from '../helper/sendReqToServer'\r\n\r\nexport const sendReqLogin = createAsyncThunk(\r\n    \"localhost:4000/account/signin\",\r\n    async (dataReq, thunkAPI) => {\r\n        const configReq = {\r\n            method: 'POST',\r\n            url: '/account/signin',\r\n            header: {\r\n                \"Content-Type\": 'application/x-www-form-urlencoded;charset=utf-8'\r\n            },\r\n            data: dataReq\r\n        }\r\n        const res = await sendReq(configReq)\r\n        return res.data\r\n    }\r\n)\r\n\r\nexport const sendReqReLogin = createAsyncThunk(\r\n    \"localhost:4000/\",\r\n    async \r\n)\r\n\r\nconst authenticate = createSlice({\r\n    name: \"authenticate\",\r\n    initialState: {\r\n        auth : {\r\n            isAuthenticated: false,\r\n            message: {\r\n                type: null,\r\n                mess: null\r\n            },\r\n        },\r\n        isLoading : false\r\n    },\r\n    reducers : {\r\n        setMess : (state, action) => {\r\n            state.auth.message = {\r\n                type: action.payload.type,\r\n                mess: action.payload.mess\r\n            }\r\n        },\r\n        setIsLoad : (state, action) => {\r\n            state.isLoading = action.payload\r\n        }\r\n    },\r\n    extraReducers : (builder) => {\r\n        builder.addCase(sendReqLogin.pending, (state, action) => {\r\n            state.isLoading = true;\r\n        })\r\n        builder.addCase(sendReqLogin.fulfilled, (state, action) => {\r\n            if(state.auth !== action.payload.isAuthenticated) {\r\n                state.auth = action.payload\r\n            }\r\n            else {\r\n                state.auth.message = action.payload.message\r\n            }\r\n            state.isLoading = false;\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setMess, setIsLoad} = authenticate.actions;\r\nexport default authenticate.reducer;"]},"metadata":{},"sourceType":"module"}