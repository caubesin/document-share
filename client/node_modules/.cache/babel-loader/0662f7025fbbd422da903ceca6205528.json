{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport sendReq from '../helper/sendReqToServer';\nexport const upLoadFile = createAsyncThunk(\"localhost:4000/upload\", async (data, thunkAPI) => {\n  const configReq = {\n    method: 'post',\n    url: '/upload',\n    header: {},\n    data: data\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const downLoadFile = createAsyncThunk(\"localhost:4000/download\", async (configReq, thunkAPI) => {\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const getFile = createAsyncThunk(\"localhost:4000/file\", async (fileIdArray, thunkAPI) => {\n  const data = new FormData();\n  fileIdArray.map((file, index) => {\n    return data.append(index, file);\n  });\n  const configReq = {\n    method: \"post\",\n    url: '/file',\n    header: {},\n    data: da\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nconst file = createSlice({\n  name: \"file\",\n  initialState: {\n    file: [\"\"],\n    message: {\n      type: null,\n      mess: null\n    },\n    isLoading: false\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.message = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(upLoadFile.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(upLoadFile.fulfilled, (state, action) => {\n      state.message = action.payload.message;\n      state.isLoading = false;\n      console.log(state.message);\n    });\n    builder.addCase(downLoadFile.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(downLoadFile.fulfilled, (state, action) => {\n      state.file = action.payload.file;\n      state.message = action.payload.message;\n      state.isLoading = false;\n    });\n    builder.addCase(getFile.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(getFile.fulfilled, (state, action) => {\n      state.file = action.payload.file;\n      state.message = action.payload.message;\n      state.isLoading = false;\n    });\n  }\n});\nexport const {\n  setMessage\n} = file.actions;\nexport default file.reducer;","map":{"version":3,"sources":["D:/Learn_ReactJS/document-share/client/src/features/fileSlice.js"],"names":["createAsyncThunk","createSlice","sendReq","upLoadFile","data","thunkAPI","configReq","method","url","header","res","downLoadFile","getFile","fileIdArray","FormData","map","file","index","append","da","name","initialState","message","type","mess","isLoading","reducers","setMessage","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","console","log","actions","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport sendReq from '../helper/sendReqToServer';\r\n\r\nexport const upLoadFile = createAsyncThunk(\r\n    \"localhost:4000/upload\",\r\n    async (data, thunkAPI) => {\r\n        const configReq = {\r\n            method: 'post',\r\n            url: '/upload',\r\n            header: {},\r\n            data: data\r\n        }\r\n        const res = await sendReq(configReq);\r\n        return res.data;\r\n    }\r\n)\r\n\r\nexport const downLoadFile = createAsyncThunk(\r\n    \"localhost:4000/download\",\r\n    async (configReq, thunkAPI) => {\r\n        const res = await sendReq(configReq);\r\n        return res.data;\r\n    }\r\n)\r\n\r\nexport const getFile = createAsyncThunk(\r\n    \"localhost:4000/file\",\r\n    async (fileIdArray,thunkAPI) => {\r\n        const data = new FormData();\r\n        fileIdArray.map((file, index) => {\r\n            return data.append(index, file);\r\n        })\r\n        const configReq = {\r\n            method: \"post\",\r\n            url: '/file',\r\n            header: {},\r\n            data: da\r\n        }\r\n        const res = await sendReq(configReq);\r\n        return res.data\r\n    }\r\n)\r\n\r\nconst file = createSlice({\r\n    name: \"file\",\r\n    initialState: {\r\n        file: [\"\"],\r\n        message: {\r\n            type: null,\r\n            mess: null\r\n        },\r\n        isLoading: false\r\n    },\r\n    reducers: {\r\n        setMessage : (state, action) => {\r\n            state.message = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(upLoadFile.pending, (state, action) => {\r\n            state.isLoading = true\r\n        })\r\n        builder.addCase(upLoadFile.fulfilled, (state, action) => {\r\n            state.message = action.payload.message\r\n            state.isLoading = false\r\n            console.log(state.message)\r\n        })\r\n        builder.addCase(downLoadFile.pending, (state, action) => {\r\n            state.isLoading = true\r\n        })\r\n        builder.addCase(downLoadFile.fulfilled, (state, action) => {\r\n            state.file = action.payload.file\r\n            state.message = action.payload.message\r\n            state.isLoading = false\r\n        })\r\n        builder.addCase(getFile.pending, (state, action) => {\r\n            state.isLoading = true\r\n        })\r\n        builder.addCase(getFile.fulfilled, (state, action) => {\r\n            state.file = action.payload.file\r\n            state.message = action.payload.message\r\n            state.isLoading = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setMessage} = file.actions;\r\nexport default file.reducer;"]},"metadata":{},"sourceType":"module"}