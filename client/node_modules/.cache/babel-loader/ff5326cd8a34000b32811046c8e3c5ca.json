{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport sendReq from '../helper/sendReqToServer';\nexport const getUserData = createAsyncThunk(\"localhost:4000/user\", async thunkAPI => {\n  const configReq = {\n    method: 'get',\n    url: '/user',\n    header: {\n      \"Content-Type\": \"text/plain\"\n    },\n    data: \"\"\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const getFriend = createAsyncThunk(\"localhost:4000/user/friend\", async thunkAPI => {\n  const configReq = {\n    method: 'get',\n    url: '/user/friend',\n    header: {\n      \"Content-Type\": \"text/plain\"\n    },\n    data: \"\"\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nconst user = createSlice({\n  name: \"user\",\n  initialState: {\n    isLoading: true,\n    user: null,\n    friend: {\n      ac\n    }\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getUserData.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(getUserData.fulfilled, (state, action) => {\n      state.user = action.payload;\n      state.isLoading = false;\n      console.log(state.user);\n    });\n    builder.addCase(getFriend.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(getFriend.fulfilled, (state, action) => {\n      state.friend = action.payload;\n      state.isLoading = false;\n      console.log(state.friend);\n    });\n  }\n});\nexport const {} = user.actions;\nexport default user.reducer;","map":{"version":3,"sources":["D:/Learn_ReactJS/document-share/client/src/features/userSlice.js"],"names":["createAsyncThunk","createSlice","sendReq","getUserData","thunkAPI","configReq","method","url","header","data","res","getFriend","user","name","initialState","isLoading","friend","ac","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","console","log","actions","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CACvC,qBADuC,EAEvC,MAAOI,QAAP,IAAoB;AAChB,QAAMC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEdC,IAAAA,GAAG,EAAE,OAFS;AAGdC,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ,KAHM;AAMdC,IAAAA,IAAI,EAAE;AANQ,GAAlB;AAQA,QAAMC,GAAG,GAAG,MAAMR,OAAO,CAACG,SAAD,CAAzB;AACA,SAAOK,GAAG,CAACD,IAAX;AACH,CAbsC,CAApC;AAgBP,OAAO,MAAME,SAAS,GAAGX,gBAAgB,CACrC,4BADqC,EAErC,MAAOI,QAAP,IAAqB;AACjB,QAAMC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEVC,IAAAA,GAAG,EAAE,cAFK;AAGVC,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ,KAHE;AAMVC,IAAAA,IAAI,EAAE;AANI,GAAlB;AAQA,QAAMC,GAAG,GAAG,MAAMR,OAAO,CAACG,SAAD,CAAzB;AACA,SAAOK,GAAG,CAACD,IAAX;AACH,CAboC,CAAlC;AAgBP,MAAMG,IAAI,GAAGX,WAAW,CAAC;AACrBY,EAAAA,IAAI,EAAE,MADe;AAErBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAE,IADD;AAEVH,IAAAA,IAAI,EAAG,IAFG;AAGVI,IAAAA,MAAM,EAAE;AACJC,MAAAA;AADI;AAHE,GAFO;AASrBC,EAAAA,QAAQ,EAAE,EATW;AAYrBC,EAAAA,aAAa,EAAIC,OAAD,IAAa;AACzBA,IAAAA,OAAO,CAACC,OAAR,CAAgBlB,WAAW,CAACmB,OAA5B,EAAqC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACH,KAFD;AAGAK,IAAAA,OAAO,CAACC,OAAR,CAAgBlB,WAAW,CAACsB,SAA5B,EAAuC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACtDD,MAAAA,KAAK,CAACX,IAAN,GAAaY,MAAM,CAACE,OAApB;AACAH,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACX,IAAlB;AACH,KAJD;AAKAQ,IAAAA,OAAO,CAACC,OAAR,CAAgBV,SAAS,CAACW,OAA1B,EAAmC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACH,KAFD;AAGAK,IAAAA,OAAO,CAACC,OAAR,CAAgBV,SAAS,CAACc,SAA1B,EAAqC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACP,MAAN,GAAeQ,MAAM,CAACE,OAAtB;AACAH,MAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACP,MAAlB;AACH,KAJD;AAKH;AA7BoB,CAAD,CAAxB;AAkCA,OAAO,MAAM,KAAKJ,IAAI,CAACiB,OAAhB;AACP,eAAejB,IAAI,CAACkB,OAApB","sourcesContent":["import {createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport sendReq from '../helper/sendReqToServer'\r\n\r\nexport const getUserData = createAsyncThunk(\r\n    \"localhost:4000/user\",\r\n    async (thunkAPI) => {\r\n        const configReq = {\r\n            method: 'get',\r\n            url: '/user',\r\n            header: {\r\n                \"Content-Type\": \"text/plain\"\r\n            },\r\n            data: \"\"\r\n        }\r\n        const res = await sendReq(configReq)\r\n        return res.data\r\n    }\r\n)\r\n\r\nexport const getFriend = createAsyncThunk(\r\n    \"localhost:4000/user/friend\",\r\n    async (thunkAPI)  => {\r\n        const configReq = {\r\n            method: 'get',\r\n                url: '/user/friend',\r\n                header: {\r\n                    \"Content-Type\": \"text/plain\"\r\n                },\r\n                data: \"\"\r\n        }\r\n        const res = await sendReq(configReq)\r\n        return res.data\r\n    }\r\n)\r\n\r\nconst user = createSlice({\r\n    name: \"user\",\r\n    initialState: {\r\n        isLoading: true,\r\n        user : null,\r\n        friend: {\r\n            ac\r\n        }\r\n    },\r\n    reducers: {\r\n\r\n    },\r\n    extraReducers : (builder) => {\r\n        builder.addCase(getUserData.pending, (state, action) => {\r\n            state.isLoading = true\r\n        })\r\n        builder.addCase(getUserData.fulfilled, (state, action) => {\r\n            state.user = action.payload\r\n            state.isLoading = false\r\n            console.log(state.user)\r\n        })\r\n        builder.addCase(getFriend.pending, (state, action) => {\r\n            state.isLoading = true\r\n        })\r\n        builder.addCase(getFriend.fulfilled, (state, action) => {\r\n            state.friend = action.payload\r\n            state.isLoading = false\r\n            console.log(state.friend)\r\n        })\r\n    }\r\n})\r\n\r\n\r\n\r\nexport const {} = user.actions;\r\nexport default user.reducer;"]},"metadata":{},"sourceType":"module"}