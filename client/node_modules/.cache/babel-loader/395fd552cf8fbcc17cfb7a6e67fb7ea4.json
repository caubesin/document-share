{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport sendReq from '../helper/sendReqToServer';\nimport FileDownload from \"js-file-download\";\nexport const upLoadFile = createAsyncThunk(\"localhost:4000/upload\", async (data, thunkAPI) => {\n  const configReq = {\n    method: 'post',\n    url: '/upload',\n    header: {},\n    data: data\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const downLoadFile = createAsyncThunk(\"localhost:4000/download\", async (fileId, thunkAPI) => {\n  const configReq = {\n    method: \"get\",\n    url: `/file/download/${fileId}`\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const getFile = createAsyncThunk(\"localhost:4000/file\", async (type, thunkAPI) => {\n  const configReq = {\n    method: \"get\",\n    url: '/file',\n    params: {\n      type: type\n    }\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nconst file = createSlice({\n  name: \"file\",\n  initialState: {\n    file: [\"\"],\n    fileDownload: \"\",\n    message: {\n      type: null,\n      mess: null\n    },\n    isLoading: true\n  },\n  reducers: {\n    setMessage: (state, action) => {\n      state.message = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(upLoadFile.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(upLoadFile.fulfilled, (state, action) => {\n      state.message = action.payload.message;\n      state.isLoading = false;\n    });\n    builder.addCase(downLoadFile.fulfilled, (state, action) => {\n      state.fileDownload = action.payload;\n    });\n    builder.addCase(getFile.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(getFile.fulfilled, (state, action) => {\n      state.file = action.payload.file;\n      state.isLoading = false;\n    });\n  }\n});\nexport const {\n  setMessage\n} = file.actions;\nexport default file.reducer;","map":{"version":3,"sources":["D:/Learn_ReactJS/document-share/client/src/features/fileSlice.js"],"names":["createAsyncThunk","createSlice","sendReq","FileDownload","upLoadFile","data","thunkAPI","configReq","method","url","header","res","downLoadFile","fileId","getFile","type","params","file","name","initialState","fileDownload","message","mess","isLoading","reducers","setMessage","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport sendReq from '../helper/sendReqToServer';\r\nimport FileDownload from \"js-file-download\";\r\n\r\nexport const upLoadFile = createAsyncThunk(\r\n    \"localhost:4000/upload\",\r\n    async (data, thunkAPI) => {\r\n        const configReq = {\r\n            method: 'post',\r\n            url: '/upload',\r\n            header: {},\r\n            data: data\r\n        }\r\n        const res = await sendReq(configReq);\r\n        return res.data;\r\n    }\r\n)\r\n\r\nexport const downLoadFile = createAsyncThunk(\r\n    \"localhost:4000/download\",\r\n    async (fileId, thunkAPI) => {\r\n        const configReq = {\r\n            method: \"get\",\r\n            url: `/file/download/${fileId}`,\r\n        }\r\n        const res = await sendReq(configReq);\r\n        return res.data;\r\n    }\r\n)\r\n\r\nexport const getFile = createAsyncThunk(\r\n    \"localhost:4000/file\",\r\n    async (type,thunkAPI) => {\r\n        const configReq = {\r\n            method: \"get\",\r\n            url: '/file',\r\n            params: {\r\n                type : type\r\n            }\r\n        }\r\n        const res = await sendReq(configReq);\r\n        return res.data\r\n    }\r\n)\r\n\r\nconst file = createSlice({\r\n    name: \"file\",\r\n    initialState: {\r\n        file: [\"\"],\r\n        fileDownload: \"\",\r\n        message: {\r\n            type: null,\r\n            mess: null\r\n        },\r\n        isLoading: true\r\n    },\r\n    reducers: {\r\n        setMessage : (state, action) => {\r\n            state.message = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(upLoadFile.pending, (state, action) => {\r\n            state.isLoading = true;\r\n        })\r\n        builder.addCase(upLoadFile.fulfilled, (state, action) => {\r\n            state.message = action.payload.message\r\n            state.isLoading = false;\r\n        })\r\n        builder.addCase(downLoadFile.fulfilled, (state, action) => {\r\n            state.fileDownload = action.payload;\r\n        })\r\n        builder.addCase(getFile.pending, (state, action) => {\r\n            state.isLoading = true\r\n        })\r\n        builder.addCase(getFile.fulfilled, (state, action) => {\r\n            state.file = action.payload.file\r\n            state.isLoading = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setMessage} = file.actions;\r\nexport default file.reducer;"]},"metadata":{},"sourceType":"module"}