{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport sendReq from '../helper/sendReqToServer';\nexport const getUserData = createAsyncThunk(\"localhost:4000/user\", async thunkAPI => {\n  const configReq = {\n    method: 'get',\n    url: '/user',\n    header: {\n      \"Content-Type\": \"text/plain\"\n    },\n    data: \"\"\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const getFriend = createAsyncThunk(\"localhost:4000/user/friend\", async (type, thunkAPI) => {\n  const configReq = {\n    method: 'get',\n    url: '/user/friend',\n    header: {\n      \"Content-Type\": \"text/plain\"\n    },\n    params: {\n      type: type\n    }\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nexport const handleFriend = createAsyncThunk(\"localhost:4000/user/friend/handle\", async (_ref, thunkAPI) => {\n  let {\n    type,\n    id\n  } = _ref;\n  console.log();\n  const configReq = {\n    method: 'get',\n    url: '/user/friend/handle',\n    header: {\n      \"Content-Type\": \"text/plain\"\n    },\n    params: {\n      type: type,\n      id: id\n    }\n  };\n  const res = await sendReq(configReq);\n  return res.data;\n});\nconst user = createSlice({\n  name: \"user\",\n  initialState: {\n    user: {\n      isLoad: true,\n      user_info: null\n    },\n    friend: {\n      isLoad: true,\n      friend: [],\n      message: \"\"\n    }\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getUserData.pending, (state, action) => {\n      state.user.isLoad = true;\n    });\n    builder.addCase(getUserData.fulfilled, (state, action) => {\n      state.user.user_info = action.payload;\n      state.user.isLoad = false;\n      console.log(state.user.user_info);\n    });\n    builder.addCase(getFriend.pending, (state, action) => {\n      state.friend.isLoad = true;\n    });\n    builder.addCase(getFriend.fulfilled, (state, action) => {\n      state.friend = {\n        isLoad: true,\n        friend: action.payload\n      };\n      console.log(state.friend);\n    });\n    builder.addCase(handleFriend.pending, (state, action) => {\n      state.friend.isLoad = true;\n    });\n    builder.addCase(handleFriend.fulfilled, (state, action) => {\n      state.friend.isLoad = false;\n      state.friend.message = action.payload;\n      console.log(state.friend.message);\n    });\n  }\n});\nexport const {} = user.actions;\nexport default user.reducer;","map":{"version":3,"sources":["D:/Learn_ReactJS/document-share/client/src/features/userSlice.js"],"names":["createAsyncThunk","createSlice","sendReq","getUserData","thunkAPI","configReq","method","url","header","data","res","getFriend","type","params","handleFriend","id","console","log","user","name","initialState","isLoad","user_info","friend","message","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","actions","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CACvC,qBADuC,EAEvC,MAAOI,QAAP,IAAoB;AAChB,QAAMC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEdC,IAAAA,GAAG,EAAE,OAFS;AAGdC,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ,KAHM;AAMdC,IAAAA,IAAI,EAAE;AANQ,GAAlB;AAQA,QAAMC,GAAG,GAAG,MAAMR,OAAO,CAACG,SAAD,CAAzB;AACA,SAAOK,GAAG,CAACD,IAAX;AACH,CAbsC,CAApC;AAgBP,OAAO,MAAME,SAAS,GAAGX,gBAAgB,CACrC,4BADqC,EAErC,OAAOY,IAAP,EAAYR,QAAZ,KAA0B;AACtB,QAAMC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEVC,IAAAA,GAAG,EAAE,cAFK;AAGVC,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ,KAHE;AAMVK,IAAAA,MAAM,EAAE;AACJD,MAAAA,IAAI,EAAEA;AADF;AANE,GAAlB;AAUA,QAAMF,GAAG,GAAG,MAAMR,OAAO,CAACG,SAAD,CAAzB;AACA,SAAOK,GAAG,CAACD,IAAX;AACH,CAfoC,CAAlC;AAkBP,OAAO,MAAMK,YAAY,GAAGd,gBAAgB,CACxC,mCADwC,EAExC,aAAkBI,QAAlB,KAAgC;AAAA,MAAzB;AAACQ,IAAAA,IAAD;AAAOG,IAAAA;AAAP,GAAyB;AAC5BC,EAAAA,OAAO,CAACC,GAAR;AACA,QAAMZ,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM;AAEVC,IAAAA,GAAG,EAAE,qBAFK;AAGVC,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ,KAHE;AAMVK,IAAAA,MAAM,EAAE;AACJD,MAAAA,IAAI,EAAEA,IADF;AAEJG,MAAAA,EAAE,EAAEA;AAFA;AANE,GAAlB;AAWA,QAAML,GAAG,GAAG,MAAMR,OAAO,CAACG,SAAD,CAAzB;AACA,SAAOK,GAAG,CAACD,IAAX;AACH,CAjBuC,CAArC;AAoBP,MAAMS,IAAI,GAAGjB,WAAW,CAAC;AACrBkB,EAAAA,IAAI,EAAE,MADe;AAErBC,EAAAA,YAAY,EAAE;AACVF,IAAAA,IAAI,EAAG;AACHG,MAAAA,MAAM,EAAE,IADL;AAEHC,MAAAA,SAAS,EAAE;AAFR,KADG;AAKVC,IAAAA,MAAM,EAAE;AACJF,MAAAA,MAAM,EAAE,IADJ;AAEJE,MAAAA,MAAM,EAAE,EAFJ;AAGJC,MAAAA,OAAO,EAAE;AAHL;AALE,GAFO;AAarBC,EAAAA,QAAQ,EAAE,EAbW;AAgBrBC,EAAAA,aAAa,EAAIC,OAAD,IAAa;AACzBA,IAAAA,OAAO,CAACC,OAAR,CAAgBzB,WAAW,CAAC0B,OAA5B,EAAqC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACZ,IAAN,CAAWG,MAAX,GAAoB,IAApB;AACH,KAFD;AAGAM,IAAAA,OAAO,CAACC,OAAR,CAAgBzB,WAAW,CAAC6B,SAA5B,EAAuC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACtDD,MAAAA,KAAK,CAACZ,IAAN,CAAWI,SAAX,GAAuBS,MAAM,CAACE,OAA9B;AACAH,MAAAA,KAAK,CAACZ,IAAN,CAAWG,MAAX,GAAoB,KAApB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYa,KAAK,CAACZ,IAAN,CAAWI,SAAvB;AACH,KAJD;AAKAK,IAAAA,OAAO,CAACC,OAAR,CAAgBjB,SAAS,CAACkB,OAA1B,EAAmC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACP,MAAN,CAAaF,MAAb,GAAsB,IAAtB;AACH,KAFD;AAGAM,IAAAA,OAAO,CAACC,OAAR,CAAgBjB,SAAS,CAACqB,SAA1B,EAAqC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACP,MAAN,GAAe;AACXF,QAAAA,MAAM,EAAE,IADG;AAEXE,QAAAA,MAAM,EAAEQ,MAAM,CAACE;AAFJ,OAAf;AAIAjB,MAAAA,OAAO,CAACC,GAAR,CAAYa,KAAK,CAACP,MAAlB;AACH,KAND;AAOAI,IAAAA,OAAO,CAACC,OAAR,CAAgBd,YAAY,CAACe,OAA7B,EAAsC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrDD,MAAAA,KAAK,CAACP,MAAN,CAAaF,MAAb,GAAsB,IAAtB;AACH,KAFD;AAGAM,IAAAA,OAAO,CAACC,OAAR,CAAgBd,YAAY,CAACkB,SAA7B,EAAwC,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACvDD,MAAAA,KAAK,CAACP,MAAN,CAAaF,MAAb,GAAsB,KAAtB;AACAS,MAAAA,KAAK,CAACP,MAAN,CAAaC,OAAb,GAAuBO,MAAM,CAACE,OAA9B;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAYa,KAAK,CAACP,MAAN,CAAaC,OAAzB;AACH,KAJD;AAKH;AA3CoB,CAAD,CAAxB;AAgDA,OAAO,MAAM,KAAKN,IAAI,CAACgB,OAAhB;AACP,eAAehB,IAAI,CAACiB,OAApB","sourcesContent":["import {createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport sendReq from '../helper/sendReqToServer'\r\n\r\nexport const getUserData = createAsyncThunk(\r\n    \"localhost:4000/user\",\r\n    async (thunkAPI) => {\r\n        const configReq = {\r\n            method: 'get',\r\n            url: '/user',\r\n            header: {\r\n                \"Content-Type\": \"text/plain\"\r\n            },\r\n            data: \"\"\r\n        }\r\n        const res = await sendReq(configReq)\r\n        return res.data\r\n    }\r\n)\r\n\r\nexport const getFriend = createAsyncThunk(\r\n    \"localhost:4000/user/friend\",\r\n    async (type,thunkAPI)  => {\r\n        const configReq = {\r\n            method: 'get',\r\n                url: '/user/friend',\r\n                header: {\r\n                    \"Content-Type\": \"text/plain\"\r\n                },\r\n                params: {\r\n                    type: type\r\n                }\r\n        }\r\n        const res = await sendReq(configReq)\r\n        return res.data\r\n    }\r\n)\r\n\r\nexport const handleFriend = createAsyncThunk(\r\n    \"localhost:4000/user/friend/handle\",\r\n    async ({type, id},thunkAPI)  => {\r\n        console.log()\r\n        const configReq = {\r\n            method: 'get',\r\n                url: '/user/friend/handle',\r\n                header: {\r\n                    \"Content-Type\": \"text/plain\"\r\n                },\r\n                params: {\r\n                    type: type,\r\n                    id: id\r\n                }\r\n        }\r\n        const res = await sendReq(configReq)\r\n        return res.data\r\n    }\r\n)\r\n\r\nconst user = createSlice({\r\n    name: \"user\",\r\n    initialState: {\r\n        user : {\r\n            isLoad: true,\r\n            user_info: null\r\n        },\r\n        friend: {\r\n            isLoad: true,\r\n            friend: [],\r\n            message: \"\"\r\n        }\r\n    },\r\n    reducers: {\r\n\r\n    },\r\n    extraReducers : (builder) => {\r\n        builder.addCase(getUserData.pending, (state, action) => {\r\n            state.user.isLoad = true\r\n        })\r\n        builder.addCase(getUserData.fulfilled, (state, action) => {\r\n            state.user.user_info = action.payload\r\n            state.user.isLoad = false\r\n            console.log(state.user.user_info)\r\n        })\r\n        builder.addCase(getFriend.pending, (state, action) => {\r\n            state.friend.isLoad = true\r\n        })\r\n        builder.addCase(getFriend.fulfilled, (state, action) => {\r\n            state.friend = {\r\n                isLoad: true,\r\n                friend: action.payload\r\n            }\r\n            console.log(state.friend)\r\n        })\r\n        builder.addCase(handleFriend.pending, (state, action) => {\r\n            state.friend.isLoad = true\r\n        })\r\n        builder.addCase(handleFriend.fulfilled, (state, action) => {\r\n            state.friend.isLoad = false\r\n            state.friend.message = action.payload\r\n            console.log(state.friend.message)\r\n        })\r\n    }\r\n})\r\n\r\n\r\n\r\nexport const {} = user.actions;\r\nexport default user.reducer;"]},"metadata":{},"sourceType":"module"}