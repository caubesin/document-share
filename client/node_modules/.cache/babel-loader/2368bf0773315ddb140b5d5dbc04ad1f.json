{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport sendReq from '../helper/sendReqLogin';\nexport const sendReqToServer = createAsyncThunk(\"localhost:4000\", async (configReq, thunkAPI) => {\n  const res = await sendReq(configReq);\n  return res.data;\n});\nconst authenticate = createSlice({\n  name: \"authenticate\",\n  initialState: {\n    auth: {\n      isAuthenticated: false,\n      message: {\n        type: null,\n        mess: null\n      }\n    },\n    isLoading: f\n  },\n  reducers: {\n    setMess: (state, action) => {\n      state.auth.message = {\n        type: action.payload.type,\n        mess: action.payload.mess\n      };\n    },\n    setIsLoad: (state, action) => {\n      state.isLoading = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(sendReqToServer.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(sendReqToServer.fulfilled, (state, action) => {\n      if (state.auth !== action.payload.isAuthenticated) {\n        state.auth = action.payload;\n      } else {\n        state.auth.message = action.payload.message;\n      }\n\n      state.isLoading = false;\n    });\n  }\n});\nexport const {\n  setMess,\n  setIsLoad\n} = authenticate.actions;\nexport default authenticate.reducer;","map":{"version":3,"sources":["D:/Learn_ReactJS/document-share/client/src/features/authenticateSlice.js"],"names":["createAsyncThunk","createSlice","sendReq","sendReqToServer","configReq","thunkAPI","res","data","authenticate","name","initialState","auth","isAuthenticated","message","type","mess","isLoading","f","reducers","setMess","state","action","payload","setIsLoad","extraReducers","builder","addCase","pending","fulfilled","actions","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,OAAOC,OAAP,MAAoB,wBAApB;AAEA,OAAO,MAAMC,eAAe,GAAGH,gBAAgB,CAC3C,gBAD2C,EAE3C,OAAOI,SAAP,EAAkBC,QAAlB,KAA+B;AAC3B,QAAMC,GAAG,GAAG,MAAMJ,OAAO,CAACE,SAAD,CAAzB;AACA,SAAOE,GAAG,CAACC,IAAX;AACH,CAL0C,CAAxC;AAQP,MAAMC,YAAY,GAAGP,WAAW,CAAC;AAC7BQ,EAAAA,IAAI,EAAE,cADuB;AAE7BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAG;AACHC,MAAAA,eAAe,EAAE,KADd;AAEHC,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAE,IADD;AAELC,QAAAA,IAAI,EAAE;AAFD;AAFN,KADG;AAQVC,IAAAA,SAAS,EAAGC;AARF,GAFe;AAY7BC,EAAAA,QAAQ,EAAG;AACPC,IAAAA,OAAO,EAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzBD,MAAAA,KAAK,CAACT,IAAN,CAAWE,OAAX,GAAqB;AACjBC,QAAAA,IAAI,EAAEO,MAAM,CAACC,OAAP,CAAeR,IADJ;AAEjBC,QAAAA,IAAI,EAAEM,MAAM,CAACC,OAAP,CAAeP;AAFJ,OAArB;AAIH,KANM;AAOPQ,IAAAA,SAAS,EAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACJ,SAAN,GAAkBK,MAAM,CAACC,OAAzB;AACH;AATM,GAZkB;AAuB7BE,EAAAA,aAAa,EAAIC,OAAD,IAAa;AACzBA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,eAAe,CAACwB,OAAhC,EAAyC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACxDD,MAAAA,KAAK,CAACJ,SAAN,GAAkB,IAAlB;AACH,KAFD;AAGAS,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,eAAe,CAACyB,SAAhC,EAA2C,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC1D,UAAGD,KAAK,CAACT,IAAN,KAAeU,MAAM,CAACC,OAAP,CAAeV,eAAjC,EAAkD;AAC9CQ,QAAAA,KAAK,CAACT,IAAN,GAAaU,MAAM,CAACC,OAApB;AACH,OAFD,MAGK;AACDF,QAAAA,KAAK,CAACT,IAAN,CAAWE,OAAX,GAAqBQ,MAAM,CAACC,OAAP,CAAeT,OAApC;AACH;;AACDO,MAAAA,KAAK,CAACJ,SAAN,GAAkB,KAAlB;AACH,KARD;AASH;AApC4B,CAAD,CAAhC;AAuCA,OAAO,MAAM;AAACG,EAAAA,OAAD;AAAUI,EAAAA;AAAV,IAAuBf,YAAY,CAACqB,OAA1C;AACP,eAAerB,YAAY,CAACsB,OAA5B","sourcesContent":["import {createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport sendReq from '../helper/sendReqLogin'\r\n\r\nexport const sendReqToServer = createAsyncThunk(\r\n    \"localhost:4000\",\r\n    async (configReq, thunkAPI) => {\r\n        const res = await sendReq(configReq)\r\n        return res.data\r\n    }\r\n)\r\n\r\nconst authenticate = createSlice({\r\n    name: \"authenticate\",\r\n    initialState: {\r\n        auth : {\r\n            isAuthenticated: false,\r\n            message: {\r\n                type: null,\r\n                mess: null\r\n            }\r\n        },\r\n        isLoading : f\r\n    },\r\n    reducers : {\r\n        setMess : (state, action) => {\r\n            state.auth.message = {\r\n                type: action.payload.type,\r\n                mess: action.payload.mess\r\n            }\r\n        },\r\n        setIsLoad : (state, action) => {\r\n            state.isLoading = action.payload\r\n        }\r\n    },\r\n    extraReducers : (builder) => {\r\n        builder.addCase(sendReqToServer.pending, (state, action) => {\r\n            state.isLoading = true;\r\n        })\r\n        builder.addCase(sendReqToServer.fulfilled, (state, action) => {\r\n            if(state.auth !== action.payload.isAuthenticated) {\r\n                state.auth = action.payload\r\n            }\r\n            else {\r\n                state.auth.message = action.payload.message\r\n            }\r\n            state.isLoading = false;\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setMess, setIsLoad} = authenticate.actions;\r\nexport default authenticate.reducer;"]},"metadata":{},"sourceType":"module"}